    function CombinationEngine( product, combined_option) {
        this.product = product;
        this.combined_option = combined_option;
    };

    CombinationEngine.prototype.start = function () {
    };

    CombinationEngine.prototype.error_wrapper_element = $('<div class="options-combinations-error"></div>');

    CombinationEngine.prototype.include_styles = function () {
        var styles = `
                <style>
                    div.thumbnail.opt-as-image {
                        text-align: center;
                    }

                    .tingle-btn.tingle-btn--primary:disabled {
                        background-color: #6d6b6b;
                    }

                    .image_picker_image, .thumbnail.opt-as-image, ul.thumbnails.image_picker_selector li.opt-as-image div.thumbnail.disabled:before {border-radius: ${options_like_images_radius ? options_like_images_radius : '0'}px;}

                    div.thumbnail.opt-as-list {
                        text-align: center;
                        vertical-align: middle;
                    }

                    div.thumbnail.opt-as-list span {
                        height: 100%;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                    }

                    ${options_like_list_width ? 'div.thumbnail.opt-as-list {min-width: '+options_like_list_width+'px;}' : ''}

                    ${options_like_list_height ? 'div.thumbnail.opt-as-list {height: '+options_like_list_height+'px;}' : ''}

                    .image_picker_image.opt-as-list, .thumbnail.opt-as-list, ul.thumbnails.image_picker_selector li.opt-as-list div.thumbnail.disabled:before  {border-radius: ${options_like_list_radius ? options_like_list_radius : '0'}px;}

                    .modal-container #options-combinations-container {
                        float: left;
                        width: 50%;
                    }

                    #generic-data-container {
                        float: right;
                        width: 50%;
                    }

                    .modal-container {
                        display: inline-block;
                        width: 100%;
                        font-size: 14px;
                    }

                    .modal-container label {
                        font-size: 14px;
                    }

                    .owl-carousel.owl-theme {
                        margin-bottom: 20px;
                    }

                    .generic-product-name {
                        margin-top: 0px;
                        margin-bottom: 20px;
                        font-size: 45px;
                    }

                    #options-combinations-container {
                        padding-right: 20px;
                    }

                    #generic-data-container {
                        padding-left: 20px;
                    }

                    #generic-data-container span.generic-label {
                        font-weight: bold;
                    }

                    #options-combinations-container-placeholder #options-combinations-container .form-group {
                        border: 1px solid #e2e2e2;
                        border-radius: 5px;
                        padding: 15px;
                        display: block !important;
                    }

                    #options-combinations-container-placeholder #options-combinations-container .form-group div {
                        display: block !important;
                    }

                    #options-combinations-container .list-group {
                        padding-bottom: 0;
                        margin-bottom: 15px;
                    }

                    #options-combinations-container-placeholder #options-combinations-container .form-group.images-group, #options-combinations-container .form-group.list-group {
                        padding-bottom: 10px;
                    }

                    #options-combinations-container-placeholder #options-combinations-container .form-group:last-child {
                        margin-bottom: 10px;
                    }


                    #options-combinations-container-placeholder #options-combinations-container .form-group > label {
                        font-weight: bold;
                    }

                    #options-combinations-container-placeholder #options-combinations-container .form-group input[type=radio], #options-combinations-container-placeholder #options-combinations-container .form-group input[type=checkbox] {
                        margin: 0 0 0 0;
                        margin-right: 5px;
                        vertical-align: middle;
                    }

                    #options-combinations-container-placeholder #options-combinations-container  ul.thumbnails.image_picker_selector li {
                        margin-bottom: 0;
                    }

                    #options-combinations-container-placeholder #options-combinations-container  ul.thumbnails.image_picker_selector li div {
                        margin-bottom: 10px;
                    }

                    .tingle-modal-box__content {
                        padding: 40px;
                        padding-bottom: 0;
                    }

                    #generic-reset-options-container {
                        width: 50%;
                        padding-right: 20px;
                        text-align: right;
                    }

                    .tingle-modal-box__footer {
                        width: 50% !important;
                        float: right !important;
                        background-color: white !important;
                    }

                    .tingle-btn {
                        margin: 0 !important;
                        border-radius: 3px;
                    }

                    .tingle-btn.tingle-btn--primary {
                        width: 49%;
                        float: right;
                        background-color: #5685ff;
                        color: #ffffff;
                    }

                    .tingle-btn.tingle-btn--danger {
                        width: 49%;
                        background-color: #e8e8e8;
                        color: #535353;
                    }

                    div#options-combinations-container ul.thumbnails.image_picker_selector li .thumbnail{
                        margin-bottom: 0px;
                    }

                    div#options-combinations-container ul.thumbnails.image_picker_selector li {
                        margin-bottom: 10px;
                    }

                    div.options-combinations-error {
                        border-color: red !important;
                        color: red !important;
                    }

                    @media only screen and (max-width: 600px)  {

                        .tingle-modal-box__content{
                            padding: 5px;
                        }

                        .tingle-modal-box__footer{
                            width: 100%;
                        }

                        .tingle-btn.tingle-btn--primary {
                            width: 100%;
                        }

                        .tingle-btn.tingle-btn--danger {
                            width: 100%;
                        }

                        #options-combinations-container {
                            padding-right: 5px;
                        }

                        #generic-data-container {
                            padding-left: 5px;
                        }

                    }
                </style>
            `;

        var config_opt_comb_button_reset_options = '{{ config_opt_comb_button_reset_options }}';
        if(config_opt_comb_button_reset_options == 1) {
            styles += `
                <style>
                    @media (hover: hover) {
                        ul.thumbnails.image_picker_selector li.disabled:hover,
                        ul.thumbnails.image_picker_selector li div.thumbnail.disabled:hover {
                            cursor: no-drop !important;
                        }
                    }
                </style>
            `;
        }
        $('head').append(styles);
    };

    CombinationEngine.prototype.get_clean_options_item = function(item){
        /*returns a normalized copy of an option item */

        /* deep copy items object */
        var item = JSON.parse(JSON.stringify(item));
        Object.keys(item).forEach(function (key) {
            if (Array.isArray(item[key]) && item[key].length === 1){
                item[key] = item[key][0];
            }
        });

        return item;
    };

    CombinationEngine.prototype.array_subset_of = function (subset, haystack) {
        /* find if an array is a subset of another array */
        return subset.every(function(val) { return haystack.indexOf(val) >= 0; });
    };

    CombinationEngine.prototype.get_combination_by_options = function (options) {
        /* returns an option combination matching a given options variant */
        var self = this;

        for (var i in this.combined_option) {
            var combined_option_options = this.get_clean_options_item( this.combined_option[i]['options']);

            var isCombinedOption = true;

            if (Object.keys(combined_option_options).length !== Object.keys(options).length){
                isCombinedOption = false;
            }else{
                Object.keys(combined_option_options).forEach(function (key) {
                    if (options[key]){
                        if(!Array.isArray(options[key]) && Array.isArray(combined_option_options[key])) {
                            if (!combined_option_options[key].includes(options[key])) {
                                isCombinedOption = false;
                            }
                        } else if (Array.isArray(options[key]) && Array.isArray(combined_option_options[key])) {
                            if (!self.array_subset_of(options[key], combined_option_options[key])){
                                isCombinedOption = false;
                            }
                        } else {
                            if (options[key] !== combined_option_options[key]){
                                isCombinedOption = false;
                            }
                        }
                    } else {
                        isCombinedOption = false;
                    }
                });
            }

            if (isCombinedOption){
                return this.combined_option[i];
            }

        }
        return null;
    };

    CombinationEngine.prototype.get_possible_combinations_by_options = function (options) {
        /* returns all possible option combinations matching a given options variant */
        var self = this;

        var combined_options = [];

        for (var i in this.combined_option) {
            var combined_option_options = this.get_clean_options_item( this.combined_option[i]['options']);

            var isCombinedOption = true;

            Object.keys(options).forEach(function (key) {
                if (combined_option_options[key]){
                    /* if option is not array and combined option option is array */
                    if(!Array.isArray(options[key]) && Array.isArray(combined_option_options[key])) {
                        if (!combined_option_options[key].includes(options[key])) {
                            isCombinedOption = false;
                        }
                        /* if option and combined option option are array */
                    } else if (Array.isArray(options[key]) && Array.isArray(combined_option_options[key])) {
                        if (!self.array_subset_of(options[key], combined_option_options[key])){
                            isCombinedOption = false;
                        }
                        /* if ption and combined option option are not array */
                    } else {
                        if (options[key] !== combined_option_options[key]){
                            isCombinedOption = false;
                        }
                    }
                } else {
                    isCombinedOption = false;
                }
            });

            if (isCombinedOption){
                combined_options.push( this.combined_option[i]);
            }
        }
        return combined_options;
    };

    CombinationEngine.prototype.reset_options = function () {
        var hide_options_like_images = {{ config_opt_comb_options_like_images_hide_not_available is not empty ? 1 : 0 }};
        var hide_options_like_list = {{ config_opt_comb_options_like_list_hide_not_available is not empty ? 1 : 0 }};

        var types = ['checkbox','radio','image'];
        jQuery.each($('[data-option-id]'), function (i, item) {
            $(item).prop('disabled', false);

            var option_value = $(item).data('option-id');
            var option_key = Object.keys(option_value)[0];

            var img_selector = '.opt-as-image.'+ option_key +'-' + option_value[option_key];
            if(hide_options_like_images)
                $(img_selector).show();
            else {
                $(img_selector).removeClass('disabled');
                $(img_selector).closest().removeClass('disabled');
            }

            var list_selector = '.opt-as-list.'+ option_key +'-' + option_value[option_key];
            if(hide_options_like_list)
                $(list_selector).show();
            else {
                $(list_selector).removeClass('disabled');
                $(list_selector).closest().removeClass('disabled');
            }

            if(types.indexOf(item.type) !== -1) {
                $(item).prop('checked', false);
            }

            $('#options-combinations-container .form-group').show();
            $('.thumbnail.options-image-picker-image').removeClass('selected');

        });

        jQuery.each($('[data-option-id]').closest('select'), function (i, item) {
            $(item).val('');
        });

        jQuery('div#options-combinations-container span.option_name').remove();

        this.reset_data();
    };

    CombinationEngine.prototype.find_selected = function () {
        var selected_options = [];

        jQuery.each($('[data-option-id]:checked'), function(i, item) {
            var option_value = $(item).data('option-id');
            selected_options.push(option_value);
        });
        return selected_options;
    };

    CombinationEngine.prototype.use_variant_data = function (selected_options) {
        var variant = this.get_combination_by_options(selected_options);

        if (!variant){
            this.reset_data();
        }
    };

    CombinationEngine.prototype.get_dimensions = function (variant) {
        var dimensions_text = '';

        var dimensions_length = parseFloat(variant.length);
        var dimensions_width = parseFloat(variant.width);
        var dimensions_height = parseFloat(variant.height);

        if (dimensions_length){
            dimensions_text += ' <span class="generic-label">' + text_dimensions_length_default + '</span> ' + dimensions_length.toFixed(2);
        }
        if (dimensions_width){
            dimensions_text += ' <span class="generic-label">' + text_dimensions_width_default + '</span> ' + dimensions_width.toFixed(2);
        }
        if (dimensions_height){
            dimensions_text += ' <span class="generic-label">' + text_dimensions_height_default + '</span> ' + dimensions_height.toFixed(2);
        }

        if (dimensions_text.length){
            dimensions_text = `<span class="generic-label">${text_dimensions_default}</span>` + dimensions_text;
        }
        return dimensions_text;
    };

    CombinationEngine.prototype.get_stock = function (variant) {
        var stock_text = this.product.stock;
        if (config_opt_comb_stock){
            stock_text = stock_text + '<span class="availability-count-block">'+'('+variant.quantity+')'+'</span>'
        }
        return stock_text;
    };

    CombinationEngine.prototype.get_extra_text = function (variant) {
        var extra_text = null;
        if (variant.extra_text){
            extra_text = variant.extra_text;
        }
        return extra_text;
    };

    CombinationEngine.prototype.get_old_price = function (variant, without_format=false) {
        var old_price = null;
        if (variant.option_special){
            if (without_format){
                old_price = variant.price;
            } else {
                old_price = variant.price_formatted;
            }
        }
        return old_price;
    };

    CombinationEngine.prototype.get_price = function(variant, without_format=false) {
        var price = variant.price_formatted;
        if (variant.option_special){
            if (without_format){
                price = variant.option_special.price;
            }else {
                price = variant.option_special.price_formatted;
            }
        }
        return price
    };

    CombinationEngine.prototype.get_sku = function (variant) {
        var sku = null;
        if(variant.sku) {
            sku = variant.sku;
        }
        return sku;
    };

    CombinationEngine.prototype.get_upc = function (variant) {
        var upc = null;
        if(variant.upc) {
            upc = variant.upc;
        }
        return upc;
    };

    CombinationEngine.prototype.get_model = function (variant) {
        var model = null;
        if(variant.model) {
            model = variant.model;
        }
        return model;
    };

    CombinationEngine.prototype.get_tax = function (variant) {
        var tax = null;
        if (variant.tax_formatted){
            tax  = variant.tax_formatted
        }
        return tax;
    };

    CombinationEngine.prototype.get_reward_points = function (variant) {
        var rewardPoints = null;
        if(variant.reward) {
            rewardPoints = variant.reward;
        }
        return rewardPoints;
    };

    CombinationEngine.prototype.get_weight = function (variant) {
        var weight = null;
        if(variant.weight) {
            weight = variant.weight_formatted;
        }
        return weight;
    };

    CombinationEngine.prototype.is_possible_combination = function (combination, variants) {
        /* returns true if a given combination is part of some given variant */
        var result = true;

        if(!variants)
            return false;

        Object.keys(combination).forEach(function (combinationKey) {

            if (!variants[combinationKey]){
                result = false;
            } else {
                if (!Array.isArray(combination[combinationKey]) && Array.isArray(variants[combinationKey])){
                    if (!variants[combinationKey].includes(combination[combinationKey])){
                        result = false;
                    }
                } else if (Array.isArray(combination[combinationKey]) && !Array.isArray(variants[combinationKey])){
                    result = false;
                } else if (!Array.isArray(combination[combinationKey]) && !Array.isArray(variants[combinationKey])){
                    if (combination[combinationKey] != variants[combinationKey]){
                        result = false;
                    }
                } else if (Array.isArray(combination[combinationKey]) && Array.isArray(variants[combinationKey])){
                    var interception = variants[combinationKey].filter(function (elem) {
                        return combination[combinationKey].indexOf(elem) > -1;
                    }).length
                    if (interception != combination[combinationKey].length){
                        result = false;
                    }
                }
            }

        });

        return result;
    };

    CombinationEngine.prototype.is_not_possible_value = function (combination) {
        for(var i in this.combined_option) {
            var variants = this.combined_option[i]['options'];
            var result = this.is_possible_combination(combination, variants);
            if(result === true) {
                break;
            }
        }

        return result !== true ;
    };

    CombinationEngine.prototype.enable_all = function () {
        $('#product input').prop('disabled',false);
    };

    CombinationEngine.prototype.has_value = function (option, value) {
        var hasValue = false;

        var valueKey = Object.keys(value)[0];

        if (option[valueKey]){
            var optionData = option[valueKey];
            var valueData = value[valueKey];

            if (Array.isArray(optionData)){
                if (optionData.includes(valueData)){
                    hasValue = true;
                }
            } else if(optionData == valueData) {
                hasValue = true;
            }
        }

        return hasValue;
    };

    CombinationEngine.prototype.is_only_one_option = function (options) {
        var keys = Object.keys(options);
        if (keys.length === 1){
            if (!Array.isArray(options[keys[0]])){
                return true;
            }
        }
        return false;
    };

    CombinationEngine.prototype.include_value_in_combination = function (combination, value) {
        if (Array.isArray(combination[Object.keys(value)[0]])){
            combination[Object.keys(value)[0]].push(value[Object.keys(value)[0]]);
        } else if (combination[Object.keys(value)[0]] && combination[Object.keys(value)[0]] != value[Object.keys(value)[0]]) {
            combination[Object.keys(value)[0]] = [combination[Object.keys(value)[0]], value[Object.keys(value)[0]]];
        } else {
            combination[Object.keys(value)[0]] = value[Object.keys(value)[0]];
        }
        return combination;
    };

    CombinationEngine.prototype.replace_value_in_combination = function (combination, value) {
        combination[Object.keys(value)[0]] = value[Object.keys(value)[0]];
        return combination;
    };

    CombinationEngine.prototype.get_options_images = function (options, unique=true) {
        /* get images from possible combinations of options. if unique is true return only unique images */

        images = [];

        var possible_combinations = this.get_possible_combinations_by_options(options);

        possible_combinations.forEach(function (combination) {
            if (combination.images) {
                images = images.concat(combination.images);
            }
        });

        if (unique) {

            /*remove duplicated image objects */
            unque_images = images.reduce(function (p, c) {
                var id = c.image;
                if (p.temp.indexOf(id) === -1) {
                    p.out.push(c);
                    p.temp.push(id);
                }
                return p;
            }, { temp: [], out: [] }).out;

            return unque_images;
        }

        return images;
    };

    CombinationEngine.prototype.show_options = function (selected_block_id = '') {
        this.enable_all();

        var selected_options = this.find_selected();

        var a = {};
        selected_options.map(function (obj) {
            for (var attrname in obj) {
                if (a[attrname] && Array.isArray(a[attrname])){
                    a[attrname].push(obj[attrname]);
                    a[attrname].sort();
                } else if (a[attrname]) {
                    a[attrname] = [a[attrname], obj[attrname]];
                    a[attrname].sort();
                } else {
                    a[attrname] = obj[attrname];
                }
            }
        });

        selected_options = a;

        var selected_val = $('#'+selected_block_id).val();

        /* check for checkbox or radio */
        if(( selected_val === '' || selected_val === undefined) && selected_block_id) {
            $.each($('#'+selected_block_id+' input:checked'), function () {
                var current_val = $(this).val();
                if (selected_val && Array.isArray(selected_val)){
                    selected_val.push(current_val);
                } else if (selected_val) {
                    selected_val = [selected_val, current_val];
                } else {
                    selected_val = current_val;
                }
            })
        }

        if( selected_val === '' || selected_val === undefined) {
            selected_block_id = '';
        }

        if (!Object.keys(selected_options).length) {
            this.reset_options();
        } else {
            var option_blocks = this.get_blocks();

            for (var i in option_blocks) {

                var block_id = option_blocks[i];


                if(selected_block_id == '') {
                    selected_block_id = block_id;
                }

                if(block_id === selected_block_id && this.is_only_one_option(selected_options) && (($('#'+block_id).data('type') == 'select' || $('#'+block_id).data('type') == 'radio'))) {
                    continue;
                }

                var blockValues = this.get_block_values(block_id);

                for (var ii in blockValues) {
                    var value = blockValues[ii];

                    if (this.has_value(selected_options, value)){
                        continue;
                    }

                    included_combination = this.include_value_in_combination(JSON.parse(JSON.stringify(selected_options)), value);
                    replaced_combination = this.replace_value_in_combination(JSON.parse(JSON.stringify(selected_options)), value);

                    var result = this.is_not_possible_value(included_combination);
                    if (($('#'+block_id).data('type') == 'select' || $('#'+block_id).data('type') == 'radio')){
                        result = this.is_not_possible_value(replaced_combination);
                    }
                    this.disable_options(value, result);
                }

            }
        }

        this.hide_empty_image_blocks();

        this.use_variant_data(selected_options);
    };

    CombinationEngine.prototype.hide_empty_image_blocks = function () {
    };

    CombinationEngine.prototype.disable_options = function (option_value, is_disabled) {
        var hide_options_like_images = {{ config_opt_comb_options_like_images_hide_not_available is not empty ? 1 : 0 }};
        var hide_options_like_list = {{ config_opt_comb_options_like_list_hide_not_available is not empty ? 1 : 0 }};

        var option_key = Object.keys(option_value)[0];
        var img_selector = '.opt-as-image.'+ option_key +'-' + option_value[option_key];
        if (is_disabled){
            if(hide_options_like_images)
                $(img_selector).hide();
            else
                $(img_selector).addClass('disabled');
        } else {
            if(hide_options_like_images)
                $(img_selector).show();
            else
                $(img_selector).removeClass('disabled');
        }

        var list_selector = '.opt-as-list.'+ option_key +'-' + option_value[option_key];
        if (is_disabled){
            if(hide_options_like_list)
                $(list_selector).hide();
            else
                $(list_selector).addClass('disabled');
        } else {
            if(hide_options_like_list)
                $(list_selector).show();
            else
                $(list_selector).removeClass('disabled');
        }

        var elem = $('[data-option-id=\'' + JSON.stringify(option_value) + '\']');
        elem.prop('disabled', is_disabled);
    };

    CombinationEngine.prototype.get_block_id = function (elem) {
        return elem.closest("[id^='input-option']").attr('id');
    };

    CombinationEngine.prototype.get_blocks = function () {
        var result = [];
        jQuery.each($("[id^='input-option']"), function(i, val) {
            result[i] = val.id;
        });

        return result;
    };

    CombinationEngine.prototype.get_block_values = function (block_id) {
        var result = [];

        jQuery.each( $('#'+ block_id +' [data-option-id]'), function(i,v){
            result.push($(v).data('option-id'));
        });

        return result;
    };

    CombinationEngine.prototype.related_checkbox_like_radio = function (elem, selected_block_id) {
    };

    CombinationEngine.prototype.replace_elements = function (image, text) {
        /* this function will replace an element with a span keeping its attributes */
        var attrs = { };

        $.each($(image)[0].attributes, function(idx, attr) {
            attrs[attr.nodeName] = attr.nodeValue;
        });

        $(image).replaceWith(function () {

            var elem = $("<span />", attrs).append($(this).contents());
            elem.text(text);
            return elem;
        });
    };

    CombinationEngine.prototype.reset_combined_option_images = function (){
        console.error('reset_combined_option_images not implemented');
    };

    CombinationEngine.prototype.add_combined_option_images = function (images) {
        console.error('add_combined_option_images not implemented');
    };

    CombinationEngine.prototype.remove_combined_option_images = function () {
        console.error('remove_combined_option_images not implemented');
    };

    CombinationEngine.prototype.reset_data = function () {
        console.error('reset_data not implemented');
    };

    CombinationEngine.prototype.include_imagepicker = function () {
        var self = this;
        $("select.options-image-picker").imagepicker({
            initialized: function () {
                /* hack for include images alt message as title because lib does not allow to include title directly */
                $(document).find('img.image_picker_image.options-image-picker-image').each(function () {
                    var image = $(this);
                    image.attr('title', image.attr('alt'));
                    image.attr('data-toggle', 'tooltip');
                    image.attr('data-original-title', image.attr('alt'));

                    if (!image.attr('src')) {
                        self.replace_elements(this, image.attr('alt'));
                    }
                });

                /* set minimal width equal as height */
                $(document).find('span.image_picker_image.options-image-picker-image').each(function () {
                    $(this).parent().css("min-width", $(this).parent().outerHeight() + "px");
                });

            },
            selected: function(select, option, event) {
                var select = $(this);
                var option_name = select.find(':selected').attr('data-img-alt');
                var label = select.closest('div.form-group').children('label');
                var exist_option_name = label.find('span.option_name').length;
                if(!exist_option_name)
                    label.append('<span class="option_name"></span>');
                label.find('span.option_name').html('');
                if(option_name != '' && option_name != 'undefined')
                    label.find('span.option_name').html('&nbsp;'+option_name);
            }
        });
    };

    CombinationEngine.prototype.register_on_input_change = function () {
        var self = this;
        $('[data-option-id]').parent().on('change', function () {
            var selected_block_id = self.get_block_id($(this));
            self.related_checkbox_like_radio(this, selected_block_id);
            self.show_options(selected_block_id);
        });
    };

    CombinationEngine.prototype.register_reset_options = function () {
        var self = this;
        $('#reset_options').on('click', function (e) {
            e.preventDefault();
            self.reset_options();
        });
    };

    CombinationEngine.prototype.register_add_cart_call = function (callUrl=null, onAjaxSuccess=null, onAjaxError=null) {
        var self = this;
        var call_url = callUrl ? callUrl : ["index.php?route=checkout/cart/add"];

        $(document).ajaxSuccess(function(event, xhr, settings, json) {

            hide_function = function () {
                setTimeout(function () {
                    self.error_wrapper_element.hide(1000, function () {
                        self.error_wrapper_element.html('');
                    });
                }, 3000);
            };

            if(call_url.includes(settings.url) && json && json.error){
                if(json.error.quantity){
                    self.error_wrapper_element.html(json.error.quantity);
                    self.error_wrapper_element.show(0, hide_function);
                } else if (json.error.require_combination){
                    self.error_wrapper_element.html(json.error.require_combination);
                    self.error_wrapper_element.show(0, hide_function);
                } else if (json.error.invalid_combination) {
                    self.error_wrapper_element.html(json.error.invalid_combination);
                    self.error_wrapper_element.show(0, hide_function);
                }
            }
            if (onAjaxSuccess){
                onAjaxSuccess(event, xhr, settings, json, call_url);
            }
        });
        $(document).ajaxError(function(event, xhr, settings, error) {
            if(call_url.includes(settings.url))
            {
                if (onAjaxError){
                    onAjaxError(event, xhr, settings, error, call_url);
                }
            }

        });
    };

    CombinationEngine.prototype.include_error_wrapper = function () {
        /* includes an element for containing error messages */
        this.error_wrapper_element.hide();
        $('#reset_options').after(this.error_wrapper_element);
    };
